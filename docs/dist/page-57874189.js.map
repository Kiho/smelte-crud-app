{"version":3,"file":"page-57874189.js","sources":["../../src/formgrid/DataCol.svelte","../../src/formgrid/DataGrid.svelte","../../src/formgrid/FormField.svelte","../../src/formgrid/FormCol.svelte","../../src/formgrid/FormGrid.svelte","../../src/app/app/modal.svelte","../../src/services/appPage.ts","../../src/app/app/page.svelte"],"sourcesContent":["<script>\n    import {\n        ActionButton,\n        TextInput,\n        SelectInput,\n        NumberInput,\n        CurrencyInput,\n        CheckboxInput,\n        MaskedInput,\n    } from './inputs';\n\n    function collect(obj, field) {\n        if (typeof(field) === 'function')\n            return field(obj);\n        else if (typeof(field) === 'string')\n            return obj[field];\n        else\n            return undefined;\n    }\n\n    export let settings;\n    export let edit;\n    export let source = {};\n\n    // [svelte-upgrade warning]\n    // this function needs to be manually rewritten\n    // export let props;\n    // $: { \n    //     props = all.settings || all;\n    // }\n\n    export let fieldtype;\n    $: {\n        let ft = TextInput;\n        if (settings.component) {\n            switch (settings.component.toLowerCase()) {\n                case 'text':\n                    ft = TextInput;\n                    break;\n                case 'number':\n                    ft = NumberInput;\n                    break;    \n                // case 'masked':\n                //     ft = MaskedInput;\n                //     break;\n                // case 'currency':\n                //     ft = CurrencyInput;\n                //     break;\n                case 'date':\n                    ft = MaskedInput;\n                    break;\n                case 'select':\n                    ft = SelectInput;\n                    break;\n                case 'checkbox':\n                    ft = CheckboxInput;\n                    break;\n                case 'action':\n                    ft = ActionButton;\n                    break;\n            }\n        }\n        fieldtype = ft;\n    }\n</script>\n\n{#if edit || settings.action}\n    <svelte:component this=\"{fieldtype}\" label=\"{settings.label}\" bind:value=\"{source[settings.field]}\" on:change on:click on:keydown on:focus />\n{:else}\n    {collect(source, settings.field)}\n{/if}","<script>\n  import { afterUpdate, createEventDispatcher } from 'svelte';\n  import DataCol from './DataCol.svelte';\n  import { Icon } from \"smelte\";\n\n  const dispatch = createEventDispatcher();\n\n  export let edit = true;\n  export let columns = [];\n  export let rows = [];\n  export let selected = null;\n\n  function setRowCol(settings, i, j) {\n    settings.dataset = { row: i, col: j };\n    return settings;\n  }\n\n  let prevSelected;\n  afterUpdate(() => {\n    if (prevSelected && selected) {\n      let s = prevSelected;\n      const el = table.querySelector( \n          `[data-row=\"${s[0]}\"][data-col=\"${s[1]}\"]` \n      );\n      // console.log(s, el);\n      if (el) el.focus();\n    }\n  });\n\n  function actionClick(event, row, action) {\n      event && event.preventDefault();\n      action && action(row);\n  }\n\n  function arrow(e) {\n    const { target: node, keyCode: code} = e;\n    if (code < 37 || code > 40) return;\n\n    let i = +node.dataset.row;\n    let j = +node.dataset.col;\n\n    if (code === 37) j = Math.max(0, j - 1);\n    if (code === 39) j = Math.min(j + 1, columns.length - 1);\n    if (code === 38) i = Math.max(0, i - 1);\n    if (code === 40) i = Math.min(i + 1, rows.length - 1);\n    \n    selected = [ i, j ];\n  }\n\n  export let asc = false;\n  let sortBy = null;\n\n  $: sorted = sort(sortBy);\n\n  function sort(col) {\n    if (!col) return rows;\n\n    if (col.sort) return col.sort(rows);\n\n    const sorted = rows.sort((a, b) => {\n      const valA = col.value ? col.value(a) : a[col.field];\n      const valB = col.value ?  col.value(b) : b[col.field];\n\n      const first = asc ? valA : valB;\n      const second = asc ? valB : valA;\n\n      if (typeof valA === 'number') {\n        return first - second;\n      }\n\n      return ('' + first).localeCompare(second);\n    });\n  console.log(sorted);\n    return sorted;\n  }    \n</script>\n\n<style>\n  table {\n    @apply rounded elevation-3 p-2 text-sm;\n\n    & th, & td {\n      @apply p-3 font-normal text-left;\n    }\n\n    & th:first-child, & td:first-child {\n      @apply text-left border-r;\n    }\n\n    & th {\n      @apply text-gray-600 text-xs cursor-pointer;\n\n      & .asc {\n        transform: rotate(180deg);\n      }\n\n      & .sort-wrapper {\n        @apply flex items-center justify-end;\n      }\n\n      &:first-child .sort-wrapper {\n        @apply justify-start;\n      }\n\n      & .sort {\n        @apply w-4 h-4 opacity-0 transition-fast;\n      }\n\n      &:hover {\n        @apply text-black transition-fast;\n        & .sort {\n          @apply opacity-100;\n        }\n      }\n    }\n\n    & tr {\n      @apply border-gray-200 border-t border-b px-3;\n      &:hover {\n        @apply bg-gray-50;\n      }\n    }\n  }\n</style>\n\n<table class=\"p-1\">\n  <thead class=\"items-center\">\n    <tr>\n    {#each columns as column, i}\n      <slot name=\"header\">\n        <th\n          class=\"capitalize\"\n          on:click={() => {\n            if (column.sortable === false) return;\n            asc = sortBy === column ? !asc : false;\n            sortBy = column;\n          }}\n        >\n          <div class=\"sort-wrapper\">\n            {#if column.sortable !== false}\n              <span class=\"sort\" class:asc={!asc && sortBy === column}>\n                <Icon small color=\"text-gray-400\">arrow_downward</Icon>\n              </span>\n            {/if}\n            <span>{column.label || column.field}</span>\n          </div>\n        </th>\n      </slot>\n    {/each}\n    </tr>\n  </thead>\n\n  <tbody>\n    {#each rows as row, i}\n      <tr>\n        {#each columns as column, j}\n          <td class=\"{column.class || ''} { ((!edit && column.action) || edit) ? 'nopadding' : '' } { column.numeric ? 'numeric' : ''} { column.truncate ? ' truncate' : '' }\" \n              style=\"width: { column.width ? column.width : 'auto' }\">\n            <DataCol bind:source=\"{row}\" {edit} \n              settings=\"{setRowCol(column, i, j)}\"\n              on:change=\"{event => dispatch('update', { event })}\" \n              on:click=\"{event => actionClick(event, row, column.action)}\"\n              on:keydown=\"{arrow}\"\n              on:focus=\"{() => selected = [i, j]}\"\n            />\n          </td>    \n        {/each}\n      </tr>\n    {/each}\n  </tbody>\n</table>\n\n<!-- <style>\n    td.nopadding {\n\t\tpadding: 0 0;\n\t}\n\ttd.nopadding :global(input) {\n\t\tpadding: 0.35rem 0.5rem;\n\t\tborder-width: 0;\n\t\t/* background-color: transparent; */\n\t}\n</style> --> ","<script>\n    import { onMount } from 'svelte';   \n    import { TextField, Select } from \"smelte\";\n\n    import {\n        // TextInput,\n        // SelectInput,\n        NumberInput,\n        CurrencyInput,\n        MaskedInput,\n    } from './inputs';\n    import Field from './Field.svelte';\n    import { makeUniqueId } from '../utils';\n\n    export let settings = null;\n    export let component = null;\n    export let value = '';\n    export let uuid = makeUniqueId();\n\n    let props = $$props;\n\n    onMount(() => {\n        console.log('FormField', props);\n    });\n\n    export let fieldlabel;\n    $: {\n        fieldlabel = settings ? settings.label : '';\n    }\n\n    export let fieldtype;\n    $: {\n        let ft = TextField;\n        if (component) {\n            switch (component.toLowerCase()) {\n                case 'currency':\n                    ft = CurrencyInput;\n                    break;\n                case 'masked':\n                    ft = MaskedInput;\n                    break;\n                case 'number':\n                    ft = NumberInput;\n                    break;\n                case 'select':\n                    ft = Select;\n                    break;\n            }\n        }\n        fieldtype = ft;\n    }\n</script>\n\n<Field {settings} withSettings={true} {fieldtype} bind:value />","<script>\n    import FormField from './FormField.svelte';\n    import { omitProps } from '../utils';\n\n    export let settings = {};\n    export let source = {};\n    export let edit;\n\n    export let classes;\n    $: {                \n        if (settings.col) {\n            let cols = settings.col.split(' ');\n            cols = cols.filter(x => x && x.trim()).map(x=> 'col-' + x);\n            classes = cols.join(' ').trim();\n        }\n    }\n\n    let field, component;\n    $: field = settings.field;\n    $: component = settings.component;\n    \n    let displayable;\n    $: {\n         displayable = source && (source.hasOwnProperty(field) && source[field] != null);\n    }\n\n    let fieldProps \n    $: {\n        fieldProps = omitProps(settings, 'field', 'component', 'row', 'col', 'settings', 'withSettings', 'fieldtype');\n    }\n</script>\n\n<div class={classes}>\n    {#if edit}\n        <FormField bind:value=\"{source[field]}\" settings=\"{fieldProps}\" {component} />\n    {:else if displayable}\n        { source[field] }\n    {/if}\n</div>","<script>    \n    import FormCol from './FormCol.svelte';\n\n    export let form = null;\n    export let item = {};\n    export let columns = [];\n    export let className = '';\n    export let edit = true;\n\n    // export let source;\n    // $: {\n    //     source = item;\n    // }\n\n    export let fieldRows;\n    $: {                \n        const maxRowNum = Math.max.apply(Math, columns.map(o => o.row))\n        const rows = [];\n        for (let i = 0; i <= maxRowNum; i++) {\n            rows.push({ columns: [] });\n        }\n        columns.forEach(col => {\n            const row = rows[col.row];\n            if (row && row.columns) {\n                row.columns.push(col);\n                if (col.subtitle) {\n                    row.subtitle = col.subtitle;\n                }\n            }                \n        });\n        console.log('computed - rows', rows);\n        fieldRows = rows;\n    }\n</script>\n\n<form class=\"form-horizontal\" bind:this={form}>\n{#each fieldRows as row}\n    {#if row.subtitle}\n    <div class=\"row subtitle\">{row.subtitle}</div>\n    {/if}\n    <div class=\"row {className}\">\n        {#each row.columns as col}\n        <FormCol settings=\"{col}\" bind:source=\"{item}\" {edit} />\n        {/each}\n    </div>\n{/each}\n</form>\n\n<style>\n    .subtitle {\n        margin: 0.5rem;\n        font-size: 1rem;\n        font-weight: 600;\n        text-decoration: underline;\n        text-transform: uppercase;\n    }\n</style>","<script>\n\timport { createEventDispatcher } from 'svelte';\n  import { Dialog } from \"smelte\";\n  import { Button } from \"smelte\";\n\n  export let showModal = false;\n\tconst dispatch = createEventDispatcher();\n\n\texport let modalSize = 'default';\n\texport let title = '';\n\n\tlet formTitle;\n\t$: formTitle = title ? title : '&nbsp';\n</script>\n\n<Dialog bind:value={showModal}>\n  <h5 slot=\"title\">{@html formTitle}</h5>\n\t<div class=\"tall-dialog\">\n  \t<slot></slot>\n\t</div>\n  <div slot=\"actions\">\n\t\t<Button on:click='{() => dispatch(\"close\")}'>Close</Button>\n\t\t<Button on:click='{() => dispatch(\"save\")}'>Save Changes</Button>\n  </div>\n</Dialog>\n\n<style>\n\t.tall-dialog {\n\t\twidth: 500px;\n\t\tmin-height: 300px;\n\t}\n</style>","import AppService from './appService';\n\nexport default {\n    getList(this: IAppPage) {\n        AppService.getList(this.path).then(data => {\n            this.$set({ list: data  });\n        });\n    },\n\n    add(this: IAppPage, evt?) {\n        evt && evt.preventDefault();\n        this.$set({ showModal: true, selectedItem: {} });\n    },\n\n    edit(this: IAppPage, item, evt?) {\n        evt && evt.preventDefault();\n        this.$set({ showModal: true, selectedItem: Object.assign({}, item) });\n    },\n\n    save(this: IAppPage, item, evt?) {\n        evt && evt.preventDefault();\n        const self = this;\n        const refForm = this.form.querySelector('form');\n        if (!validateForm(refForm)) {\n            return;\n        }\n        const fnSave = (data) => {\n            self.close();\n            self.getList();\n        }\n        AppService.save(this.path, item, fnSave);\n    },\n    \n    close(this: IAppPage) {\n        this.$set({ showModal: false, selectedItem: null });\n    },\n}\n\nfunction validateForm(form) {\n    // check validity of all inputs\n    const isValid = form.checkValidity();\n    if (!isValid) {\n        for (let i = 0; i < form.length; i++) {\n            const input = form[i];\n            if (input.checkValidity) {\n                if (!input.checkValidity()) {\n                    console.log(input.validationMessage);                        \n                }\n                if (input.setError) {\n                    input.setError(input.validationMessage);\n                }\n            }\n        }\n    }\n    return isValid;\n}","<script>\n    import { afterUpdate, onMount } from 'svelte';    \n    import { Button } from \"smelte\";\n\n    import { DataGrid, FormGrid } from '../../formgrid';\n    import Modal from '../app/modal.svelte';\n    import appPage from '../../services/appPage';\n\n    export let title = '';\n    export let columndata = [];\n    export let partial = null;\n    export let instance = null;\n    export let list = [];\n    export let showModal = false;\n    export let selectedItem = {};\n    export let path = '';\n    export let fielddata = [];\n    export let form = null;\n\n    let initialized = false;\n    const app = Object.assign({}, appPage);\n\n    $: {\n        if (path && instance) {            \n            if (!initialized) initialized = true;\n        }\n    }\n\n    $: if (initialized) {\n        partial.oncreate(instance).then(getList);\n    }\n\n    export function close() {\n        app.close.call(instance);\n    }\n\n    function add(e) {\n        app.add.call(instance, e);\n    }\n\n    function save(item, e) {\n        app.save.call(instance, item, e);\n    }\n\n    export function edit(item, e) {\n        app.edit.call(instance, item, e);\n    }\n\n    export function getList() {\n        app.getList.call(instance);\n    }  \n</script>\n\n<svelte:options accessors={true}/>\n\n<div>\n    <h4 class=\"capitalize pb-8\">{title}</h4>\n    <div class=\"py-2\">\n        <DataGrid bind:rows=\"{list}\" bind:columns=\"{columndata}\" edit={false} ></DataGrid>\n    </div>\n    <div class=\"py-2\">\n        <Button on:click='{add}'>Add New</Button>\n    </div> \n    <div>\n        <div class=form-group bind:this=\"{form}\">\n            <Modal bind:showModal on:close=\"{close}\" on:save=\"{(e) => save(selectedItem, e)}\" title={selectedItem ? selectedItem.name : ''}>\n                <FormGrid columns={fielddata} bind:item=\"{selectedItem}\" ></FormGrid>\n            </Modal>\n        </div> \n    </div>\n</div>"],"names":["collect","source","settings","field","fieldtype","label","edit","action","obj","ft","TextInput","component","toLowerCase","NumberInput","MaskedInput","SelectInput","CheckboxInput","ActionButton","asc","sortBy","column","sortable","click_handler","setRowCol","i","j","row","ctx","arrow","class","numeric","truncate","width","columns","length","rows","dataset","col","dispatch","createEventDispatcher","selected","afterUpdate","sorted","sort","a","b","valA","value","valB","first","second","localeCompare","console","log","e","target","node","keyCode","code","Math","max","min","event","preventDefault","uuid","makeUniqueId","props","$$props","onMount","fieldlabel","TextField","CurrencyInput","Select","fieldProps","displayable","classes","cols","split","filter","x","trim","map","join","hasOwnProperty","omitProps","subtitle","item","className","fieldRows","form","maxRowNum","apply","o","push","forEach","formTitle","showModal","modalSize","title","getList","AppService","this","path","then","data","_this","$set","list","add","evt","selectedItem","Object","assign","save","self","isValid","checkValidity","input","validationMessage","setError","validateForm","querySelector","close","fielddata","columndata","name","partial","instance","initialized","app","appPage","call","oncreate"],"mappings":"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"}